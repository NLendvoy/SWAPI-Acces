{"version":3,"sources":["services/httpService.js","components/common/pagination.jsx","components/personGeneral.jsx","components/people.jsx","utils/paginate.js","components/movieDetails.jsx","components/common/notFound.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","interceptors","response","use","error","status","console","log","alert","Promise","reject","get","post","put","delete","Pagination","props","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","_","range","className","map","page","onClick","PersonGeneral","state","id","name","height","gender","species","prevProps","this","setState","to","xs","Component","People","personList","handlePageChange","window","scrollTo","getId","url","start","indexOf","end","length","slice","a","personResult","tempPersonArray","speciesResult","count","http","undefined","data","concat","items","pageNumber","startIndex","take","value","paginate","person","MovieDetails","match","params","films","finalFilmList","filmUrlList","filmData","film","title","episode_id","director","release_date","NotFound","App","path","component","from","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"ySAGAA,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAAAC,GAWlC,OATIA,EAAMF,UACNE,EAAMF,SAASG,QAAU,KACzBD,EAAMF,SAASG,OAAS,MAGxBC,QAAQC,IAAI,oBAAqBH,GACjCI,MAAM,iCAGHC,QAAQC,OAAON,MAGX,OACXO,IAAKX,IAAMW,IACXC,KAAMZ,IAAMY,KACZC,IAAKb,IAAMa,IACXC,OAAQd,IAAMc,Q,wBCIHC,EAtBI,SAACC,GAAW,IACpBC,EAAmDD,EAAnDC,WAAYC,EAAuCF,EAAvCE,SAAUC,EAA6BH,EAA7BG,YAAaC,EAAgBJ,EAAhBI,aAEpCC,EAAaC,KAAKC,KAAKN,EAAaC,GAC1C,GAAmB,IAAfG,EAAkB,OAAO,KAC7B,IAAMG,EAAQC,IAAEC,MAAM,EAAGL,EAAa,GAEtC,OACI,8BACI,qBAAIM,UAAU,aAAd,cACKH,EAAMI,KAAI,SAAAC,GAAI,OACX,qBAAeF,UAAWE,IAASV,EAAc,mBAAqB,YAAtE,cACI,yBAAQQ,UAAU,YAAYG,QAAS,kBAAMV,EAAaS,IAA1D,kBACKA,OAFAA,YCwBdE,E,4MAhCXC,MAAQ,CACJC,GAAI,EAAKjB,MAAMiB,GACfC,KAAM,EAAKlB,MAAMkB,KACjBC,OAAQ,EAAKnB,MAAMmB,OACnBC,OAAQ,EAAKpB,MAAMoB,OACnBC,QAAS,EAAKrB,MAAMqB,S,wDAIxB,SAAmBC,GACXC,KAAKvB,MAAMkB,OAASI,EAAUJ,MAC9BK,KAAKC,SAAS,CAACN,KAAMK,KAAKvB,MAAMkB,KAAMC,OAAQI,KAAKvB,MAAMmB,OAAQC,OAAQG,KAAKvB,MAAMoB,OAAQC,QAASE,KAAKvB,MAAMqB,Y,oBAIxH,WAAU,IAAD,EACuCE,KAAKP,MAA1CC,EADF,EACEA,GAAIC,EADN,EACMA,KAAMC,EADZ,EACYA,OAAQC,EADpB,EACoBA,OAAQC,EAD5B,EAC4BA,QAEjC,OAEI,aADA,CACC,IAAD,CAAMI,GAAE,wBAAmBR,GAAMN,UAAU,0BAA3C,SACQ,sBAAKe,GAAI,GAAT,UACI,oBAAIf,UAAU,OAAd,SAAsBO,IACtB,0CAAaE,KACb,0CAAaD,EAAb,SACA,2CAAcE,c,GA1BVM,a,IC8FbC,E,4MAnFXZ,MAAQ,CACJa,WAAY,GACZ3B,SAAU,GACVC,YAAa,G,EAsCjB2B,iBAAmB,SAACjB,GAChB,EAAKW,SAAS,CAACrB,YAAaU,IAC5BkB,OAAOC,SAAS,EAAG,I,EAIvBC,MAAQ,SAACC,GACL,IAAMC,EAAQD,EAAIE,QAAQ,UAAY,EAChCC,EAAMH,EAAII,OAAS,EAEzB,OADAhD,QAAQC,IAAI2C,EAAIK,MAAMJ,EAAOE,IACtBH,EAAIK,MAAMJ,EAAOE,I,8FA7C5B,oCAAAG,EAAA,sDAEQC,EAAe,GACfC,EAAkB,GAClBR,EAAM,gCACNS,EAAgB,GAEZC,EAAM,EAPlB,YAOqBA,EAAM,IAP3B,oBAQsB,KAAVA,EARZ,wBASYV,EAAM,gCAAkCU,EAAQ,IAT5D,mBAWqCC,EAAKlD,IAAIuC,GAX9C,gBAYqDY,KADrCL,EAXhB,QAYiCM,KAAK1B,QAAQ,GAZ9C,iBAaoBoB,EAAaM,KAAK1B,QAAU,QAbhD,mDAiBqDwB,EAAKlD,IAAI8C,EAAaM,KAAK1B,QAAQ,IAjBxF,QAiBwBsB,EAjBxB,OAkBwBF,EAAaM,KAAK1B,QAAUsB,EAAcI,KAAK7B,KAlBvE,mDAqBwB1B,MAAM,4CArB9B,0DA0BgBA,MAAM,4CA1BtB,QA4BYkD,EAAkBA,EAAgBM,OAAOP,GA5BrD,QAO+BG,IAP/B,uBA+BIrB,KAAKC,SAAS,CAACK,WAAYa,IA/B/B,kE,0EAgDA,WAAU,IAAD,OACWE,EAAUrB,KAAKP,MAAMa,WAA7BS,OADH,EAEmDf,KAAKP,MAArDd,EAFH,EAEGA,SAAUC,EAFb,EAEaA,YAEZ0B,ECvEP,SAAkBoB,EAAOC,EAAYhD,GACxC,IAAMiD,GAAcD,EAAa,GAAKhD,EAGtC,OAAOO,IAAEwC,GACRV,MAAMY,GACNC,KAAKlD,GACLmD,QDgEsBC,CAJd,EAE0BzB,WAEQ1B,EAAaD,GAEpD,OACI,gCACI,sBAAKS,UAAU,cAAf,gCACKkB,EAAWjB,KAAI,SAAA2C,GAAM,OAAI,cAAC,EAAD,CAE1BtC,GAAI,EAAKgB,MAAMsB,EAAOR,KAAKb,KAC3BhB,KAAMqC,EAAOR,KAAK7B,KAClBC,OAAQoC,EAAOR,KAAK5B,OACpBC,OAAQmC,EAAOR,KAAK3B,OACpBC,QAASkC,EAAOR,KAAK1B,SALhB,EAAKY,MAAMsB,EAAOR,KAAKb,YAHpC,6CAWI,cAAC,EAAD,CACIjC,WAAY2C,EACZ1C,SAAUA,EACVC,YAAaA,EACbC,aAAcmB,KAAKO,0B,GA7ElBH,aE+CN6B,E,4MArDXxC,MAAQ,CACJC,GAAI,EAAKjB,MAAMyD,MAAMC,OAAOzC,GAC5B0C,MAAO,I,8FAIX,oCAAAnB,EAAA,6DACUN,EAAM,gCAAkCX,KAAKP,MAAMC,GAAK,IAC1D2C,EAAgB,GAFxB,kBAI6Cf,EAAKlD,IAAIuC,GAJtD,8BAI4Da,KAAKY,MAJjE,OAIkBE,EAJlB,OAMgBjB,EAAQ,EANxB,eAO0CE,IAAvBe,EAAYjB,GAP/B,4CAS2CC,EAAKlD,IAAIkE,EAAYjB,IAThE,QAS0BkB,EAT1B,OAWoBF,EAAgBA,EAAcZ,OAAOc,GAXzD,mDAcoBtE,MAAM,8CAd1B,QAgBgBoD,IAhBhB,uBAkBYrB,KAAKC,SAAS,CAACmC,MAAOC,IAlBlC,kDAqBYpE,MAAM,qDArBlB,kE,0EAyBA,WAAU,IACSoD,EAASrB,KAAKP,MAAM2C,MAA5BrB,OACAqB,EAASpC,KAAKP,MAAd2C,MAEP,OACI,gCACI,wDAA2Bf,EAA3B,aACA,8EACKe,EAAM/C,KAAI,SAAAmD,GAAI,OACX,gCACI,yCAAYA,EAAKhB,KAAKiB,SACtB,8CAAiBD,EAAKhB,KAAKkB,cAC3B,4CAAeF,EAAKhB,KAAKmB,YACzB,gDAAmBH,EAAKhB,KAAKoB,kBAJvBJ,EAAKhB,KAAKkB,yB,GAzCjBtC,aCDZyC,EAJE,WACf,OAAO,gDCyBMC,E,4MAjBbrD,MAAQ,G,4CACR,WACE,OACA,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsD,KAAK,oBAAoBC,UAAWf,IAC3C,cAAC,IAAD,CAAOc,KAAK,UAAUC,UAAW3C,IACjC,cAAC,IAAD,CAAO0C,KAAK,aAAaC,UAAWH,IACpC,cAAC,IAAD,CAAUI,KAAK,IAAIC,OAAK,EAAChD,GAAG,YAC5B,cAAC,IAAD,CAAUA,GAAG,wB,GAVHE,aCCH+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCEdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.28f764e1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// This is an extraction of the http functionality. Made to remove axios and messy code from parent component.\r\naxios.interceptors.response.use(null, error => {\r\n    const expectedError =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n    \r\n    if (!expectedError) {\r\n        console.log(\"Logging the error\", error);\r\n        alert(\"An unexpected error occured.\");\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete\r\n};","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst Pagination = (props) => {\r\n    const {itemsCount, pageSize, currentPage, onPageChange} = props;       // Object destructuring\r\n\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);    // Determine the total number of pages\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);   // Use lodash to create an array for page use\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\"> {/* Map the list of pagination buttons */}\r\n                {pages.map(page => (\r\n                    <li key={page} className={page === currentPage ? \"page-item active\" : \"page-item\"}> {/* dynamically change the style of the buttons to match current page */}\r\n                        <button className=\"page-link\" onClick={() => onPageChange(page)}>     {/* Send onClick data to parent component */}\r\n                            {page}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n \r\nexport default Pagination;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n//This class serves as a modular child to \"People\" class. It is used to display all the general info of each individual character.\r\nclass PersonGeneral extends Component {\r\n    state = {\r\n        id: this.props.id,\r\n        name: this.props.name,\r\n        height: this.props.height,\r\n        gender: this.props.gender,\r\n        species: this.props.species,\r\n    }\r\n\r\n    // Updates all data when updated from parent. This will be called any time a new page is chosen.\r\n    componentDidUpdate(prevProps){\r\n        if (this.props.name !== prevProps.name) {\r\n            this.setState({name: this.props.name, height: this.props.height, gender: this.props.gender, species: this.props.species});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id, name, height, gender, species} = this.state; // Object destructuring\r\n\r\n        return (\r\n            // When clicked, user is taken to movie details for the character. Send ID through route params.\r\n            <Link to={`/movieDetails/${id}`} className='personGeneral-container'>\r\n                    <div xs={18}>\r\n                        <h2 className='name'>{name}</h2>\r\n                        <h5>Gender: {gender}</h5>\r\n                        <h5>Height: {height} cm</h5>\r\n                        <h5>Species: {species}</h5>\r\n                    </div>\r\n            </Link>\r\n         );\r\n    }\r\n}\r\n \r\nexport default PersonGeneral;","import React, { Component } from 'react';\r\nimport http from \"./../services/httpService\";\r\nimport Pagination from './common/pagination';\r\nimport PersonGeneral from './personGeneral';\r\nimport { paginate } from '../utils/paginate';\r\n\r\nimport '../App.css';\r\n\r\n\r\n/*\r\n    This class is the homepage of the app. It contains the state of the information \r\n    displayed and the current page information.\r\n\r\n    Data is fetched from the API when this component mounts\r\n*/\r\nclass People extends Component {\r\n    state = { \r\n        personList: [],     //Array of people retrieved from the API\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n    }\r\n    \r\n    async componentDidMount() { // Lifecycle hook, asyncronous to wait for API promise\r\n        \r\n        let personResult = [];\r\n        let tempPersonArray = [];\r\n        let url = \"https://swapi.dev/api/people/\";\r\n        let speciesResult = \"\";\r\n\r\n        for(let count=1; count<84; count++){\r\n            if (count !== 17) { // API has missing element which prevents use of while(defined) and this is a quick fix to prevent duplicates/missing data\r\n                url = \"https://swapi.dev/api/people/\" + count + '/';    // Dynamically change the URL to get the right person\r\n                try {\r\n                    personResult = await http.get(url);                 // Get person object from API\r\n                    if (personResult.data.species[0] === undefined) {   // All humans in the DB have undefined species => set to human\r\n                        personResult.data.species = \"Human\"\r\n                    }\r\n                    else {  // Person is non-human\r\n                        try {\r\n                            speciesResult = await (await http.get(personResult.data.species[0]));   // Get non-human species from DB\r\n                            personResult.data.species = speciesResult.data.name;\r\n                        }\r\n                        catch {\r\n                            alert(\"Something went wrong getting the species\")\r\n                        }\r\n                    }\r\n                } \r\n                catch (ex) {\r\n                    alert('Something failed while getting a person.')\r\n                }\r\n                tempPersonArray = tempPersonArray.concat(personResult); // Concatenate new person object to existing array\r\n            }\r\n        }\r\n        this.setState({personList: tempPersonArray});                   // Store all characters in the class state\r\n    }\r\n\r\n    // This function is used for pagination. It handles the event of a page change and autoscrolls to the top of the new page.\r\n    handlePageChange = (page) => {\r\n        this.setState({currentPage: page});\r\n        window.scrollTo(0, 0);\r\n    }\r\n    \r\n    // This function takes a url of a person and determines their ID\r\n    getId = (url) => {\r\n        const start = url.indexOf(\"people\") + 7;\r\n        const end = url.length - 1;\r\n        console.log(url.slice(start, end));\r\n        return url.slice(start, end);\r\n    }\r\n\r\n    render() {\r\n        const { length: count } = this.state.personList;                        \r\n        const { pageSize, currentPage, personList: allPeople} = this.state; // Object destructuring\r\n\r\n        const personList = paginate(allPeople, currentPage, pageSize);  // Use paginate function to determine how many people to display\r\n\r\n        return (\r\n            <div>\r\n                <div className='person-list'>                   {/* Map all required info into general info list for display */}\r\n                    {personList.map(person => <PersonGeneral            \r\n                    key={this.getId(person.data.url)}\r\n                    id={this.getId(person.data.url)}\r\n                    name={person.data.name}\r\n                    height={person.data.height}\r\n                    gender={person.data.gender}\r\n                    species={person.data.species}\r\n                    />)}\r\n                </div>                                          {/* Pagination component. Returns button array and sends data back to parent for page changes */}\r\n                <Pagination \r\n                    itemsCount={count} \r\n                    pageSize={pageSize} \r\n                    currentPage={currentPage} \r\n                    onPageChange={this.handlePageChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default People;","import _ from 'lodash';\r\n\r\n// This function takes an array, page number, and page size to determine the exact array used for pagination\r\nexport function paginate(items, pageNumber, pageSize) {\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n\r\n    //use lodash to chain a conversion, slice array, take items, convert back\r\n    return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}","import React, { Component } from 'react';\r\nimport http from './../services/httpService';\r\n\r\n\r\n/*\r\n    This component is used to display the movie details of a given character.\r\n    The character is selected via the props sent to this component.\r\n*/\r\nclass MovieDetails extends Component {\r\n    state = {\r\n        id: this.props.match.params.id,\r\n        films: [],\r\n    }\r\n\r\n    // Function called when component is first created. Async to wait for API promises\r\n    async componentDidMount() {\r\n        const url = \"https://swapi.dev/api/people/\" + this.state.id + '/';      // Dynamically set URL to get the right person\r\n        let finalFilmList = [];\r\n            try {\r\n                const filmUrlList = await (await http.get(url)).data.films;     // Get list of film urls related to character\r\n\r\n                let count = 0;\r\n                while (filmUrlList[count] !== undefined) {                      // Iterate through all films character has\r\n                    try {\r\n                        const filmData = await http.get(filmUrlList[count]);    // Get films from urls\r\n                        \r\n                        finalFilmList = finalFilmList.concat(filmData);         // Concatinate current film object to film array\r\n                    }\r\n                    catch (ex) {\r\n                        alert(\"Something failed while fetching film data.\")\r\n                    }\r\n                    count++;\r\n                }\r\n                this.setState({films: finalFilmList});                          // Set state with new array of film objects\r\n            } \r\n            catch (ex) {\r\n                alert(\"Something failed while fetching a person's films.\")\r\n            }\r\n    }\r\n\r\n    render() {\r\n        const {length: count} = this.state.films;\r\n        const {films} = this.state;                 // Object destructuring\r\n\r\n        return (\r\n            <div>\r\n                <h2>Character appeared in {count} films:</h2>\r\n                <div>                                           {/* Map to display film data */}\r\n                    {films.map(film => (\r\n                        <div key={film.data.episode_id}>\r\n                            <h2>Title: {film.data.title}</h2>\r\n                            <h5>Episode ID: {film.data.episode_id}</h5>\r\n                            <h5>Director: {film.data.director}</h5>\r\n                            <h5>Release Date: {film.data.release_date}</h5>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default MovieDetails;","import React from \"react\";\r\n\r\n// This component is a basic 404 page\r\nconst NotFound = () => {\r\n  return <h1>404 Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport {Route, Redirect, Switch} from 'react-router-dom';\nimport People from './components/people';\nimport MovieDetails from './components/movieDetails';\nimport NotFound from './components/common/notFound';\n\n/*\n  Root of app. Routing with all components.\n  Include redirect from \"/\" to \"/people\" and a \"/notFound\" component.\n*/\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n    <div>\n      <Switch>\n        <Route path=\"/movieDetails/:id\" component={MovieDetails}/>\n        <Route path=\"/people\" component={People}/>\n        <Route path=\"/not-found\" component={NotFound}/>\n        <Redirect from=\"/\" exact to=\"/people\"/>\n        <Redirect to=\"/not-found\"/>\n      </Switch>\n      \n    </div> \n    );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}