{"version":3,"sources":["services/httpService.js","components/common/pagination.jsx","components/personGeneral.jsx","components/people.jsx","utils/paginate.js","components/movieDetails.jsx","components/common/notFound.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","interceptors","response","use","error","status","console","log","alert","Promise","reject","get","post","put","delete","Pagination","props","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","_","range","className","map","page","onClick","PersonGeneral","state","id","name","height","gender","species","prevProps","a","this","setState","to","xs","Component","People","personList","speciesList","handlePageChange","getId","url","start","indexOf","end","length","slice","personResult","tempPersonArray","count","http","undefined","data","speciesResult","concat","items","pageNumber","startIndex","take","value","paginate","person","MovieDetails","match","params","films","finalFilmList","filmUrlList","filmData","film","title","episode_id","director","release_date","NotFound","App","path","component","from","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a731460.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\naxios.interceptors.response.use(null, error => {\r\n    const expectedError =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n    \r\n    if (!expectedError) {\r\n        console.log(\"Logging the error\", error);\r\n        alert(\"An unexpected error occured.\");\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete\r\n};","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst Pagination = (props) => {\r\n    const {itemsCount, pageSize, currentPage, onPageChange} = props;       // Object destructuring\r\n\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);    // Determine the total number of pages\r\n    if (pagesCount === 1) return null;\r\n    const pages = _.range(1, pagesCount + 1);   // Use lodash to create an array for page use\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pages.map(page => (\r\n                    <li key={page} className={page === currentPage ? \"page-item active\" : \"page-item\"}>\r\n                        <button className=\"page-link\" onClick={() => onPageChange(page)}>\r\n                            {page}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n \r\nexport default Pagination;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n//This class serves as a modular child to \"People\" class. It is used to display all the general info of each individual character.\r\nclass PersonGeneral extends Component {\r\n    state = {\r\n        id: this.props.id,\r\n        name: this.props.name,\r\n        height: this.props.height,\r\n        gender: this.props.gender,\r\n        species: this.props.species,\r\n    }\r\n\r\n    async componentDidUpdate(prevProps){\r\n        if (this.props.name !== prevProps.name) {\r\n            this.setState({name: this.props.name, height: this.props.height, gender: this.props.gender, species: this.props.species});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id, name, height, gender, species} = this.state;\r\n\r\n        return (\r\n            // HTML for each character\r\n            <Link to={`/movieDetails/${id}`} className='personGeneral-container'>\r\n                    <div xs={18}>\r\n                        <h2 className='name'>{name}</h2>\r\n                        <h5>Gender: {gender}</h5>\r\n                        <h5>Height: {height} cm</h5>\r\n                        <h5>Species: {species}</h5>\r\n                    </div>\r\n            </Link>\r\n         );\r\n    }\r\n}\r\n \r\nexport default PersonGeneral;","import React, { Component } from 'react';\r\nimport http from \"./../services/httpService\";\r\nimport Pagination from './common/pagination';\r\nimport PersonGeneral from './personGeneral';\r\nimport { paginate } from '../utils/paginate';\r\n\r\nimport '../App.css';\r\n\r\nclass People extends Component {\r\n    state = { \r\n        personList: [],     //Array of people retrieved from the API\r\n        speciesList: [],\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n    }\r\n    \r\n    async componentDidMount() { // Lifecycle hook, asyncronous to access API\r\n        \r\n        let personResult = [];\r\n\r\n        let url = \"https://swapi.dev/api/people/\";\r\n        let tempPersonArray = [];\r\n\r\n        for(let count=1; count<84; count++){\r\n        if (count !== 17) {                                         // API has missing element which prevents use of while(defined)\r\n            url = \"https://swapi.dev/api/people/\" + count + '/';    // Dynamically change the URL to get the right person\r\n            try {\r\n                personResult = await http.get(url);                        // Access the API\r\n                if (personResult.data.species[0] === undefined) {\r\n                    personResult.data.species = \"Human\"\r\n                }\r\n                else {\r\n                    try {\r\n                        let speciesResult = await (await http.get(personResult.data.species[0]));\r\n                        //console.log(speciesResult.data.name);\r\n                        personResult.data.species = speciesResult.data.name;\r\n                    }\r\n                    catch {\r\n                        //alert(\"Something went wrong getting the species\")\r\n                    }\r\n                }\r\n            } \r\n            catch (ex) {                                            // Catch errors or exceptions\r\n                //alert('Something failed while fetching a person.')\r\n            }\r\n            tempPersonArray = tempPersonArray.concat(personResult);                  // Concatenate most recent array to existing array\r\n        }\r\n        }\r\n        this.setState({personList: tempPersonArray});                    // Store all characters in the class state\r\n        console.log(this.state.personList);\r\n    }\r\n\r\n    handlePageChange = (page) => {\r\n        this.setState({currentPage: page});\r\n    }\r\n    \r\n    getId = (url) => {\r\n        const start = url.indexOf(\"people\") + 7;\r\n        const end = url.length - 1;\r\n        console.log(url.slice(start, end));\r\n        return url.slice(start, end);\r\n    }\r\n\r\n    render() {\r\n        const { length: count } = this.state.personList;\r\n        const { pageSize, currentPage, personList: allPeople} = this.state;    // Object Destructuring\r\n\r\n        const personList = paginate(allPeople, currentPage, pageSize);\r\n\r\n        return (\r\n            <div>\r\n                <p>Showing {count} people in the database.</p>  {/* Count all people in the list for easy access to user */}\r\n                <div className='person-list'>                   {/* Map all required info into general info list for display */}\r\n                    {personList.map(person => <PersonGeneral            \r\n                    key={this.getId(person.data.url)}\r\n                    id={this.getId(person.data.url)}\r\n                    name={person.data.name}\r\n                    height={person.data.height}\r\n                    gender={person.data.gender}\r\n                    species={person.data.species}\r\n                    />)}\r\n                </div>\r\n                <Pagination \r\n                    itemsCount={count} \r\n                    pageSize={pageSize} \r\n                    currentPage={currentPage} \r\n                    onPageChange={this.handlePageChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default People;","import _ from 'lodash';\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n\r\n    //use lodash to chain a conversion, slice array, take items, convert back\r\n    return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}","import React, { Component } from 'react';\r\nimport http from './../services/httpService';\r\n\r\nclass MovieDetails extends Component {\r\n    state = {\r\n        id: this.props.match.params.id,\r\n        name: this.props.name, \r\n        films: [],\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const url = \"https://swapi.dev/api/people/\" + this.state.id + '/';    // Dynamically change the URL to get the right person\r\n        let finalFilmList = [];\r\n            try {\r\n                const filmUrlList = await (await http.get(url)).data.films;\r\n\r\n                let count = 0;\r\n                while (filmUrlList[count] !== undefined) {\r\n                    try {\r\n                        const filmData = await http.get(filmUrlList[count]);\r\n                        \r\n                        finalFilmList = finalFilmList.concat(filmData);\r\n                    }\r\n                    catch (ex) {\r\n                        //alert(\"Something failed while fetching film data.\")\r\n                    }\r\n                    count++;\r\n                }\r\n                this.setState({films: finalFilmList});\r\n                //console.log(this.state.films);\r\n            } \r\n            catch (ex) {\r\n                //alert('Something failed while fetching a person.')\r\n            }\r\n    }\r\n\r\n    render() {\r\n        const {length: count} = this.state.films;\r\n        const {films, name} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h2>{name} appeared in {count} films:</h2>\r\n                <div>\r\n                    {films.map(film => (\r\n                        <div key={film.data.episode_id}>\r\n                            <h2>Title: {film.data.title}</h2>\r\n                            <h5>Episode ID: {film.data.episode_id}</h5>\r\n                            <h5>Director: {film.data.director}</h5>\r\n                            <h5>Release Date: {film.data.release_date}</h5>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default MovieDetails;","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return <h1>404 Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport {Route, Redirect, Switch} from 'react-router-dom';\nimport People from './components/people';\nimport MovieDetails from './components/movieDetails';\nimport NotFound from './components/common/notFound';\n\n//App component containing future seach bar and existing student array\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n    <div>\n      <Switch>\n        <Route path=\"/movieDetails/:id\" component={MovieDetails}/>\n        <Route path=\"/people\" component={People}/>\n        <Route path=\"/not-found\" component={NotFound}/>\n        <Redirect from=\"/\" exact to=\"/people\"/>\n        <Redirect to=\"/not-found\"/>\n      </Switch>\n      \n    </div> \n    );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}